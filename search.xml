<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javaIO</title>
      <link href="/2025/06/27/javaIO/"/>
      <url>/2025/06/27/javaIO/</url>
      
        <content type="html"><![CDATA[<p>流（Stream），是一个抽象的概念，是指一连串的数据（字符或字节），是以先进先出的方式发送信息的通道。当程序需要读取数据的时候，就会开启一个通向数据源的流，这个数据源可以是文件，内存，或是网络连接。类似的，当程序需要写入数据的时候，就会开启一个通向目的地的流。这时候你就可以想象数据好像在这其中“流”动一样。</p><p>一般来说关于流的特性有下面几点：</p><ul><li>先进先出：最先写入输出流的数据最先被输入流读取到。</li><li>顺序存取：可以一个接一个地往流中写入一串字节，读出时也将按写入顺序读取一串字节，不能随机访问中间的数据。（RandomAccessFile除外）</li><li>只读或只写：每个流只能是输入流或输出流的一种，不能同时具备两个功能，输入流只能进行读操作，对输出流只能进行写操作。在一个数据传输通道中，如果既要写入数据，又要读取数据，则要分别提供两个流。</li></ul><h3 id="01、传输方式划分"><a href="#01、传输方式划分" class="headerlink" title="01、传输方式划分"></a>01、传输方式划分</h3><p>传输方式有两种，字节和字符</p><p>字节（byte）是计算机中用来表示存储容量的一个计量单位，通常情况下，一个字节有 8 位（bit）。</p><p>字符（char）可以是计算机中使用的字母、数字、和符号，比如说 A 1 $ 这些。</p><p>通常来说，一个字母或者一个字符占用一个字节，一个汉字占用两个字节。（具体要看字符编码，比如说在 UTF-8 编码下，一个英文字母（不分大小写）为一个字节，一个中文汉字为三个字节；在 Unicode 编码中，一个英文字母为一个字节，一个中文汉字为两个字节。）</p><p><img src="/2025/06/27/javaIO/shangtou-02.png" alt="img"></p><p>字节流用来处理二进制文件，比如图片、音频、视频。</p><p>字符流用来处理文本文件。</p><p> IO 类核心是 4 个抽象类：InputStream、OutputStream、Reader、Writer。</p><p><strong>InputStream 类</strong></p><ul><li><code>int read()</code>：读取数据</li><li><code>int read(byte b[], int off, int len)</code>：从第 off 位置开始读，读取 len 长度的字节，然后放入数组 b 中</li><li><code>long skip(long n)</code>：跳过指定个数的字节</li><li><code>int available()</code>：返回可读的字节数</li><li><code>void close()</code>：关闭流，释放资源</li></ul><p><strong>OutputStream 类</strong></p><ul><li><code>void write(int b)</code>： 写入一个字节，虽然参数是一个 int 类型，但只有低 8 位才会写入，高 24 位会舍弃</li><li><code>void write(byte b[], int off, int len)</code>： 将数组 b 中的从 off 位置开始，长度为 len 的字节写入</li><li><code>void flush()</code>： 强制刷新，将缓冲区的数据写入</li><li><code>void close()</code>：关闭流</li></ul><p><strong>Reader 类</strong></p><ul><li><code>int read()</code>：读取单个字符</li><li><code>int read(char cbuf[], int off, int len)</code>：从第 off 位置开始读，读取 len 长度的字符，然后放入数组 b 中</li><li><code>long skip(long n)</code>：跳过指定个数的字符</li><li><code>int ready()</code>：是否可以读</li><li><code>void close()</code>：关闭流，释放资源</li></ul><p><strong>Writer 类</strong></p><ul><li><code>void write(int c)</code>： 写入一个字符</li><li><code>void write( char cbuf[], int off, int len)</code>： 将数组 cbuf 中的从 off 位置开始，长度为 len 的字符写入</li><li><code>void flush()</code>： 强制刷新，将缓冲区的数据写入</li><li><code>void close()</code>：关闭流</li></ul><p>字节流和字符流的区别：</p><ul><li>字节流一般用来处理图像、视频、音频、PPT、Word等类型的文件。字符流一般用于处理纯文本类型的文件，如TXT文件等，但不能处理图像视频等非文本文件。</li><li>字节流本身没有缓冲区，缓冲字节流相对于字节流，效率提升非常高。而字符流本身就带有缓冲区，缓冲字符流相对于字符流效率提升就不是那么大了。</li></ul><h3 id="02、操作对象划分"><a href="#02、操作对象划分" class="headerlink" title="02、操作对象划分"></a>02、操作对象划分</h3><p><img src="/2025/06/27/javaIO/shangtou-03.png" alt="img"></p><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p>文件流也就是直接操作文件的流，可以细分为字节流（FileInputStream 和 FileOuputStream）和字符流（FileReader 和 FileWriter）。</p><p>FileInputStream 的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 声明一个 int 类型的变量 b，用于存储读取到的字节</span><br><span class="line">int b;</span><br><span class="line">// 创建一个 FileInputStream 对象，用于读取文件 fis.txt 中的数据</span><br><span class="line">FileInputStream fis1 = new FileInputStream(&quot;fis.txt&quot;);</span><br><span class="line"></span><br><span class="line">// 循环读取文件中的数据</span><br><span class="line">while ((b = fis1.read()) != -1) &#123;</span><br><span class="line">    // 将读取到的字节转换为对应的 ASCII 字符，并输出到控制台</span><br><span class="line">    System.out.println((char)b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 关闭 FileInputStream 对象，释放资源</span><br><span class="line">fis1.close();</span><br></pre></td></tr></table></figure><p>FileOutputStream 的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个 FileOutputStream 对象，用于写入数据到文件 fos.txt 中</span><br><span class="line">FileOutputStream fos = new FileOutputStream(&quot;fos.txt&quot;);</span><br><span class="line"></span><br><span class="line">// 向文件中写入数据，这里写入的是字符串 &quot;sandraDuludulu&quot; 对应的字节数组</span><br><span class="line">fos.write(&quot;sandraDuludulu&quot;.getBytes());</span><br><span class="line"></span><br><span class="line">// 关闭 FileOutputStream 对象，释放资源</span><br><span class="line">fos.close();</span><br></pre></td></tr></table></figure><p>FileReader 的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 声明一个 int 类型的变量 b，用于存储读取到的字符</span><br><span class="line">int b = 0;</span><br><span class="line"></span><br><span class="line">// 创建一个 FileReader 对象，用于读取文件 read.txt 中的数据</span><br><span class="line">FileReader fileReader = new FileReader(&quot;read.txt&quot;);</span><br><span class="line"></span><br><span class="line">// 循环读取文件中的数据</span><br><span class="line">while ((b = fileReader.read()) != -1) &#123;</span><br><span class="line">    // 将读取到的字符强制转换为 char 类型，并输出到控制台</span><br><span class="line">    System.out.println((char)b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 关闭 FileReader 对象，释放资源</span><br><span class="line">fileReader.close();</span><br></pre></td></tr></table></figure><p>FileWriter 的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个 FileWriter 对象，用于写入数据到文件 fw.txt 中</span><br><span class="line">FileWriter fileWriter = new FileWriter(&quot;fw.txt&quot;);</span><br><span class="line"></span><br><span class="line">// 将字符串 &quot;sandraDuludulu&quot; 转换为字符数组</span><br><span class="line">char[] chars = &quot;sandraDuludulu&quot;.toCharArray();</span><br><span class="line"></span><br><span class="line">// 向文件中写入数据，这里写入的是 chars 数组中的所有字符</span><br><span class="line">fileWriter.write(chars, 0, chars.length);</span><br><span class="line"></span><br><span class="line">// 关闭 FileWriter 对象，释放资源</span><br><span class="line">fileWriter.close();</span><br></pre></td></tr></table></figure><p>文件流还可以用于创建、删除、重命名文件等操作。FileOutputStream 和 FileWriter 构造函数的第二个参数可以指定是否追加数据到文件末尾。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 创建文件</span><br><span class="line">File file = new File(&quot;test.txt&quot;);</span><br><span class="line">if (file.createNewFile()) &#123;</span><br><span class="line">    System.out.println(&quot;文件创建成功&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    System.out.println(&quot;文件已存在&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 删除文件</span><br><span class="line">if (file.delete()) &#123;</span><br><span class="line">    System.out.println(&quot;文件删除成功&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    System.out.println(&quot;文件删除失败&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 重命名文件</span><br><span class="line">File oldFile = new File(&quot;old.txt&quot;);</span><br><span class="line">File newFile = new File(&quot;new.txt&quot;);</span><br><span class="line">if (oldFile.renameTo(newFile)) &#123;</span><br><span class="line">    System.out.println(&quot;文件重命名成功&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    System.out.println(&quot;文件重命名失败&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当掌握了文件的输入输出，其他的自然也就掌握了，都大差不差。</p><h4 id="数组（内存）"><a href="#数组（内存）" class="headerlink" title="数组（内存）"></a>数组（内存）</h4><p>通常来说，针对文件的读写操作，使用文件流配合缓冲流就够用了，但为了提升效率，频繁地读写文件并不是太好，那么就出现了数组流，有时候也称为内存流。</p><p>ByteArrayInputStream 的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个 ByteArrayInputStream 对象，用于从字节数组中读取数据</span><br><span class="line">InputStream is = new BufferedInputStream(</span><br><span class="line">        new ByteArrayInputStream(</span><br><span class="line">                &quot;sandraDuludulu&quot;.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line"></span><br><span class="line">// 定义一个字节数组用于存储读取到的数据</span><br><span class="line">byte[] flush = new byte[1024];</span><br><span class="line"></span><br><span class="line">// 定义一个变量用于存储每次读取到的字节数</span><br><span class="line">int len = 0;</span><br><span class="line"></span><br><span class="line">// 循环读取字节数组中的数据，并输出到控制台</span><br><span class="line">while (-1 != (len = is.read(flush))) &#123;</span><br><span class="line">    // 将读取到的字节转换为对应的字符串，并输出到控制台</span><br><span class="line">    System.out.println(new String(flush, 0, len));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 关闭输入流，释放资源</span><br><span class="line">is.close();</span><br></pre></td></tr></table></figure><p>ByteArrayOutputStream 的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个 ByteArrayOutputStream 对象，用于写入数据到内存缓冲区中</span><br><span class="line">ByteArrayOutputStream bos = new ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">// 定义一个字节数组用于存储要写入内存缓冲区中的数据</span><br><span class="line">byte[] info = &quot;sandraDuludulu&quot;.getBytes();</span><br><span class="line"></span><br><span class="line">// 向内存缓冲区中写入数据，这里写入的是 info 数组中的所有字节</span><br><span class="line">bos.write(info, 0, info.length);</span><br><span class="line"></span><br><span class="line">// 将内存缓冲区中的数据转换为字节数组</span><br><span class="line">byte[] dest = bos.toByteArray();</span><br><span class="line"></span><br><span class="line">// 关闭 ByteArrayOutputStream 对象，释放资源</span><br><span class="line">bos.close();</span><br></pre></td></tr></table></figure><p>数组流可以用于在内存中读写数据，比如将数据存储在字节数组中进行压缩、加密、序列化等操作。它的优点是不需要创建临时文件，可以提高程序的效率。但是，数组流也有缺点，它只能存储有限的数据量，如果存储的数据量过大，会导致内存溢出。</p><h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><p>Java 中的管道和 Unix&#x2F;Linux 中的管道不同，在 Unix&#x2F;Linux 中，不同的进程之间可以通过管道来通信，但 Java 中，通信的双方必须在同一个进程中，也就是在同一个 JVM 中，管道为线程之间的通信提供了通信能力。</p><p>一个线程通过 PipedOutputStream 写入的数据可以被另外一个线程通过相关联的 PipedInputStream 读取出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个 PipedOutputStream 对象和一个 PipedInputStream 对象</span><br><span class="line">final PipedOutputStream pipedOutputStream = new PipedOutputStream();</span><br><span class="line">final PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream);</span><br><span class="line"></span><br><span class="line">// 创建一个线程，向 PipedOutputStream 中写入数据</span><br><span class="line">Thread thread1 = new Thread(new Runnable() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 将字符串 &quot;sandraDuludulu&quot; 转换为字节数组，并写入到 PipedOutputStream 中</span><br><span class="line">            pipedOutputStream.write(&quot;sandraDuludulu&quot;.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            // 关闭 PipedOutputStream，释放资源</span><br><span class="line">            pipedOutputStream.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 创建一个线程，从 PipedInputStream 中读取数据并输出到控制台</span><br><span class="line">Thread thread2 = new Thread(new Runnable() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 定义一个字节数组用于存储读取到的数据</span><br><span class="line">            byte[] flush = new byte[1024];</span><br><span class="line">            // 定义一个变量用于存储每次读取到的字节数</span><br><span class="line">            int len = 0;</span><br><span class="line">            // 循环读取字节数组中的数据，并输出到控制台</span><br><span class="line">            while (-1 != (len = pipedInputStream.read(flush))) &#123;</span><br><span class="line">                // 将读取到的字节转换为对应的字符串，并输出到控制台</span><br><span class="line">                System.out.println(new String(flush, 0, len));</span><br><span class="line">            &#125;</span><br><span class="line">            // 关闭 PipedInputStream，释放资源</span><br><span class="line">            pipedInputStream.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 启动线程1和线程2</span><br><span class="line">thread1.start();</span><br><span class="line">thread2.start();</span><br></pre></td></tr></table></figure><p>使用管道流可以实现不同线程之间的数据传输，可以用于线程间的通信、数据的传递等。但是，管道流也有一些局限性，比如只能在同一个 JVM 中的线程之间使用，不能跨越不同的 JVM 进程。</p><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>基本数据类型输入输出流是一个字节流，该流不仅可以读写字节和字符，还可以读写基本数据类型。</p><p>DataInputStream 提供了一系列可以读基本数据类型的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个 DataInputStream 对象，用于从文件中读取数据</span><br><span class="line">DataInputStream dis = new DataInputStream(new FileInputStream(&quot;das.txt&quot;));</span><br><span class="line"></span><br><span class="line">// 读取一个字节，将其转换为 byte 类型</span><br><span class="line">byte b = dis.readByte();</span><br><span class="line"></span><br><span class="line">// 读取两个字节，将其转换为 short 类型</span><br><span class="line">short s = dis.readShort();</span><br><span class="line"></span><br><span class="line">// 读取四个字节，将其转换为 int 类型</span><br><span class="line">int i = dis.readInt();</span><br><span class="line"></span><br><span class="line">// 读取八个字节，将其转换为 long 类型</span><br><span class="line">long l = dis.readLong();</span><br><span class="line"></span><br><span class="line">// 读取四个字节，将其转换为 float 类型</span><br><span class="line">float f = dis.readFloat();</span><br><span class="line"></span><br><span class="line">// 读取八个字节，将其转换为 double 类型</span><br><span class="line">double d = dis.readDouble();</span><br><span class="line"></span><br><span class="line">// 读取一个字节，将其转换为 boolean 类型</span><br><span class="line">boolean bb = dis.readBoolean();</span><br><span class="line"></span><br><span class="line">// 读取两个字节，将其转换为 char 类型</span><br><span class="line">char ch = dis.readChar();</span><br><span class="line"></span><br><span class="line">// 关闭 DataInputStream，释放资源</span><br><span class="line">dis.close();</span><br></pre></td></tr></table></figure><p>DataOutputStream 提供了一系列可以写基本数据类型的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个 DataOutputStream 对象，用于将数据写入到文件中</span><br><span class="line">DataOutputStream das = new DataOutputStream(new FileOutputStream(&quot;das.txt&quot;));</span><br><span class="line"></span><br><span class="line">// 将一个 byte 类型的数据写入到文件中</span><br><span class="line">das.writeByte(10);</span><br><span class="line"></span><br><span class="line">// 将一个 short 类型的数据写入到文件中</span><br><span class="line">das.writeShort(100);</span><br><span class="line"></span><br><span class="line">// 将一个 int 类型的数据写入到文件中</span><br><span class="line">das.writeInt(1000);</span><br><span class="line"></span><br><span class="line">// 将一个 long 类型的数据写入到文件中</span><br><span class="line">das.writeLong(10000L);</span><br><span class="line"></span><br><span class="line">// 将一个 float 类型的数据写入到文件中</span><br><span class="line">das.writeFloat(12.34F);</span><br><span class="line"></span><br><span class="line">// 将一个 double 类型的数据写入到文件中</span><br><span class="line">das.writeDouble(12.56);</span><br><span class="line"></span><br><span class="line">// 将一个 boolean 类型的数据写入到文件中</span><br><span class="line">das.writeBoolean(true);</span><br><span class="line"></span><br><span class="line">// 将一个 char 类型的数据写入到文件中</span><br><span class="line">das.writeChar(&#x27;A&#x27;);</span><br><span class="line"></span><br><span class="line">// 关闭 DataOutputStream，释放资源</span><br><span class="line">das.close();</span><br></pre></td></tr></table></figure><p>除了 DataInputStream 和 DataOutputStream，Java IO 还提供了其他一些读写基本数据类型和字符串的流类，包括 ObjectInputStream 和 ObjectOutputStream（用于读写对象）。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;person.dat&quot;))) &#123;</span><br><span class="line">        Person p = new Person(&quot;张三&quot;, 20);</span><br><span class="line">        oos.writeObject(p);</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(&quot;person.dat&quot;))) &#123;</span><br><span class="line">        Person p = (Person) ois.readObject();</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125; catch (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码创建了一个 Person 对象，将其写入文件中，然后从文件中读取该对象，并打印在控制台上。</p><h4 id="缓冲"><a href="#缓冲" class="headerlink" title="缓冲"></a>缓冲</h4><p>CPU 很快，它比内存快 100 倍，比磁盘快百万倍。那也就意味着，程序和内存交互会很快，和硬盘交互相对就很慢，这样就会导致性能问题。</p><p>为了减少程序和硬盘的交互，提升程序的效率，就引入了缓冲流，也就是类名前缀带有 Buffer 的那些，比如说 BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter。</p><p><img src="/shangtou-04.png" alt="img"></p><p>缓冲流在内存中设置了一个缓冲区，只有缓冲区存储了足够多的带操作的数据后，才会和内存或者硬盘进行交互。简单来说，就是一次多读&#x2F;写点，少读&#x2F;写几次，这样程序的性能就会提高。</p><p>以下是一个使用 BufferedInputStream 读取文件的示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个 BufferedInputStream 对象，用于从文件中读取数据</span><br><span class="line">BufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;data.txt&quot;));</span><br><span class="line"></span><br><span class="line">// 创建一个字节数组，作为缓存区</span><br><span class="line">byte[] buffer = new byte[1024];</span><br><span class="line"></span><br><span class="line">// 读取文件中的数据，并将其存储到缓存区中</span><br><span class="line">int bytesRead;</span><br><span class="line">while ((bytesRead = bis.read(buffer)) != -1) &#123;</span><br><span class="line">    // 对缓存区中的数据进行处理</span><br><span class="line">    // 这里只是简单地将读取到的字节数组转换为字符串并打印出来</span><br><span class="line">    System.out.println(new String(buffer, 0, bytesRead));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 关闭 BufferedInputStream，释放资源</span><br><span class="line">bis.close();</span><br></pre></td></tr></table></figure><p>上述代码中，首先创建了一个 BufferedInputStream 对象，用于从文件中读取数据。然后创建了一个字节数组作为缓存区，每次读取数据时将数据存储到缓存区中。读取数据的过程是通过 while 循环实现的，每次读取数据后对缓存区中的数据进行处理。最后关闭 BufferedInputStream，释放资源。</p><p>以下是一个使用 BufferedOutputStream 写入文件的示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个 BufferedOutputStream 对象，用于将数据写入到文件中</span><br><span class="line">BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;data.txt&quot;));</span><br><span class="line"></span><br><span class="line">// 创建一个字节数组，作为缓存区</span><br><span class="line">byte[] buffer = new byte[1024];</span><br><span class="line"></span><br><span class="line">// 将数据写入到文件中</span><br><span class="line">String data = &quot;sandraDuludulu是个大傻子!&quot;;</span><br><span class="line">buffer = data.getBytes();</span><br><span class="line">bos.write(buffer);</span><br><span class="line"></span><br><span class="line">// 刷新缓存区，将缓存区中的数据写入到文件中</span><br><span class="line">bos.flush();</span><br><span class="line"></span><br><span class="line">// 关闭 BufferedOutputStream，释放资源</span><br><span class="line">bos.close();</span><br></pre></td></tr></table></figure><p>上述代码中，首先创建了一个 BufferedOutputStream 对象，用于将数据写入到文件中。然后创建了一个字节数组作为缓存区，将数据写入到缓存区中。写入数据的过程是通过 write() 方法实现的，将字节数组作为参数传递给 write() 方法即可。</p><p>最后，通过 flush() 方法将缓存区中的数据写入到文件中。在写入数据时，由于使用了 BufferedOutputStream，数据会先被写入到缓存区中，只有在缓存区被填满或者调用了 flush() 方法时才会将缓存区中的数据写入到文件中。</p><p>以下是一个使用 BufferedReader 读取文件的示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个 BufferedReader 对象，用于从文件中读取数据</span><br><span class="line">BufferedReader br = new BufferedReader(new FileReader(&quot;data.txt&quot;));</span><br><span class="line"></span><br><span class="line">// 读取文件中的数据，并将其存储到字符串中</span><br><span class="line">String line;</span><br><span class="line">while ((line = br.readLine()) != null) &#123;</span><br><span class="line">    // 对读取到的数据进行处理</span><br><span class="line">    // 这里只是简单地将读取到的每一行字符串打印出来</span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 关闭 BufferedReader，释放资源</span><br><span class="line">br.close();</span><br></pre></td></tr></table></figure><p>上述代码中，首先创建了一个 BufferedReader 对象，用于从文件中读取数据。然后使用 readLine() 方法读取文件中的数据，每次读取一行数据并将其存储到一个字符串中。读取数据的过程是通过 while 循环实现的。</p><p>以下是一个使用 BufferedWriter 写入文件的示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个 BufferedWriter 对象，用于将数据写入到文件中</span><br><span class="line">BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;data.txt&quot;));</span><br><span class="line"></span><br><span class="line">// 将数据写入到文件中</span><br><span class="line">String data = &quot;sandraDuludulu，真帅气&quot;;</span><br><span class="line">bw.write(data);</span><br><span class="line"></span><br><span class="line">// 刷新缓存区，将缓存区中的数据写入到文件中</span><br><span class="line">bw.flush();</span><br><span class="line"></span><br><span class="line">// 关闭 BufferedWriter，释放资源</span><br><span class="line">bw.close();</span><br></pre></td></tr></table></figure><p>上述代码中，首先创建了一个 BufferedWriter 对象，用于将数据写入到文件中。然后使用 write() 方法将数据写入到缓存区中，写入数据的过程和使用 FileWriter 类似。需要注意的是，使用 BufferedWriter 写入数据时，数据会先被写入到缓存区中，只有在缓存区被填满或者调用了 flush() 方法时才会将缓存区中的数据写入到文件中。</p><p>最后，通过 flush() 方法将缓存区中的数据写入到文件中，并通过 close() 方法关闭 BufferedWriter，释放资源。</p><p>使用缓冲流可以提高读写效率，减少了频繁的读写磁盘或网络的次数，从而提高了程序的性能。但是，在使用缓冲流时需要注意缓冲区的大小和清空缓冲区的时机，以避免数据丢失或不完整的问题。</p><h4 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h4><p>Java 的打印流是一组用于打印输出数据的类，包括 PrintStream 和 PrintWriter 两个类。</p><p>恐怕 Java 程序员一生当中最常用的就是打印流了：<code>System.out</code> 其实返回的就是一个 PrintStream 对象，可以用来打印各式各样的对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;sandraDuludulu是真的开心！&quot;);</span><br></pre></td></tr></table></figure><p>PrintStream 最终输出的是字节数据，而 PrintWriter 则是扩展了 Writer 接口，所以它的 <code>print()/println()</code> 方法最终输出的是字符数据。使用上几乎和 PrintStream 一模一样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StringWriter buffer = new StringWriter();</span><br><span class="line">try (PrintWriter pw = new PrintWriter(buffer)) &#123;</span><br><span class="line">    pw.println(&quot;sandraDuludulu&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(buffer.toString());</span><br></pre></td></tr></table></figure><h4 id="对象序列化-反序列化"><a href="#对象序列化-反序列化" class="headerlink" title="对象序列化&#x2F;反序列化"></a>对象序列化&#x2F;反序列化</h4><p>序列化本质上是将一个 Java 对象转成字节数组，然后可以将其保存到文件中，或者通过网络传输到远程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个 ByteArrayOutputStream 对象 buffer，用于存储数据</span><br><span class="line">ByteArrayOutputStream buffer = new ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">// 使用 try-with-resources 语句创建一个 ObjectOutputStream 对象 output，并将其与 buffer 关联</span><br><span class="line">try (ObjectOutputStream output = new ObjectOutputStream(buffer)) &#123;</span><br><span class="line">    </span><br><span class="line">    // 使用 writeUTF() 方法将字符串 &quot;sandraDuludulu&quot; 写入到缓冲区中</span><br><span class="line">    output.writeUTF(&quot;sandraDuludulu&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用 toByteArray() 方法将缓冲区中的数据转换成字节数组，并输出到控制台</span><br><span class="line">System.out.println(Arrays.toString(buffer.toByteArray()));</span><br></pre></td></tr></table></figure><p>与其对应的，有序列化，就有反序列化，也就是再将字节数组转成 Java 对象的过程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try (ObjectInputStream input = new ObjectInputStream(new FileInputStream(</span><br><span class="line">        new File(&quot;Person.txt&quot;)))) &#123;</span><br><span class="line">    String s = input.readUTF();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码主要使用了 Java 的 ByteArrayOutputStream 和 ObjectOutputStream 类，将字符串 “sandraDuludulu” 写入到一个字节数组缓冲区中，并将缓冲区中的数据转换成字节数组输出到控制台。</p><p>具体的执行过程如下：</p><ul><li>创建一个 ByteArrayOutputStream 对象 buffer，用于存储数据。</li><li>使用 try-with-resources语句创建一个 ObjectOutputStream 对象 output，并将其与 buffer 关联。</li><li>使用 writeUTF() 方法将字符串 “sandraDuludulu” 写入到缓冲区中。</li><li>当 try-with-resources 语句执行完毕时，会自动调用 output 的 close() 方法关闭输出流，释放资源。</li><li>使用 toByteArray() 方法将缓冲区中的数据转换成字节数组。</li><li>使用 Arrays.toString() 方法将字节数组转换成字符串，并输出到控制台。</li></ul><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><p>InputStreamReader 是从字节流到字符流的桥连接，它使用指定的字符集读取字节并将它们解码为字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个 InputStreamReader 对象 isr，使用 FileInputStream 对象读取文件 demo.txt 的内容并将其转换为字符流</span><br><span class="line">InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;demo.txt&quot;));</span><br><span class="line"></span><br><span class="line">// 创建一个字符数组 cha，用于存储读取的字符数据，其中 1024 表示数组的长度</span><br><span class="line">char[] cha = new char[1024];</span><br><span class="line"></span><br><span class="line">// 使用 read() 方法读取 isr 中的数据，并将读取的字符数据存储到 cha 数组中，返回值 len 表示读取的字符数</span><br><span class="line">int len = isr.read(cha);</span><br><span class="line"></span><br><span class="line">// 将 cha 数组中从下标 0 开始、长度为 len 的部分转换成字符串，并输出到控制台</span><br><span class="line">System.out.println(new String(cha, 0, len));</span><br><span class="line"></span><br><span class="line">// 关闭 InputStreamReader 对象 isr，释放资源</span><br><span class="line">isr.close();</span><br></pre></td></tr></table></figure><p>这段代码主要使用了 Java 的 InputStreamReader 和 FileInputStream 类，从文件 demo.txt 中读取数据并将其转换为字符流，然后将读取的字符数据存储到一个字符数组中，并输出转换成字符串后的结果到控制台。</p><p>OutputStreamWriter 将一个字符流的输出对象变为字节流的输出对象，是字符流通向字节流的桥梁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个 File 对象 f，表示文件 test.txt</span><br><span class="line">File f = new File(&quot;test.txt&quot;);</span><br><span class="line"></span><br><span class="line">// 创建一个 OutputStreamWriter 对象 out，使用 FileOutputStream 对象将数据写入到文件 f 中，并将字节流转换成字符流</span><br><span class="line">Writer out = new OutputStreamWriter(new FileOutputStream(f));</span><br><span class="line"></span><br><span class="line">// 使用 write() 方法将字符串 &quot;sandraDuludulu!!&quot; 写入到文件 f 中</span><br><span class="line">out.write(&quot;sandraDuludulu!!&quot;);</span><br><span class="line"></span><br><span class="line">// 关闭 Writer 对象 out，释放资源</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIO</title>
      <link href="/2025/06/27/NIO/"/>
      <url>/2025/06/27/NIO/</url>
      
        <content type="html"><![CDATA[<p><img src="/2025/06/27/NIO/nio-01.png" alt="nio-01.png"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>看这篇文章需要先查看javaIO的相关知识，在此简单说明一下。</p></blockquote><p>流（Stream），是一个抽象的概念，是指一连串的数据（字符或字节），是以先进先出的方式发送信息的通道。当程序需要读取数据的时候，就会开启一个通向数据源的流，这个数据源可以是文件，内存，或是网络连接。类似的，当程序需要写入数据的时候，就会开启一个通向目的地的流。这时候你就可以想象数据好像在这其中“流”动一样。</p><p>一般来说关于流的特性有下面几点：</p><ul><li>先进先出：最先写入输出流的数据最先被输入流读取到。</li><li>顺序存取：可以一个接一个地往流中写入一串字节，读出时也将按写入顺序读取一串字节，不能随机访问中间的数据。（RandomAccessFile除外）</li><li>只读或只写：每个流只能是输入流或输出流的一种，不能同时具备两个功能，输入流只能进行读操作，对输出流只能进行写操作。在一个数据传输通道中，如果既要写入数据，又要读取数据，则要分别提供两个流。</li></ul><p>传输方式有两种，字节和字符</p><p>字节（byte）是计算机中用来表示存储容量的一个计量单位，通常情况下，一个字节有 8 位（bit）。</p><p>字符（char）可以是计算机中使用的字母、数字、和符号，比如说 A 1 $ 这些。</p><p>通常来说，一个字母或者一个字符占用一个字节，一个汉字占用两个字节。（具体要看字符编码，比如说在 UTF-8 编码下，一个英文字母（不分大小写）为一个字节，一个中文汉字为三个字节；在 Unicode 编码中，一个英文字母为一个字节，一个中文汉字为两个字节。）</p><p><img src="/2025/06/27/NIO/shangtou-02.png" alt="img"></p><p>字节流用来处理二进制文件，比如图片、音频、视频。</p><p>字符流用来处理文本文件。</p><p> IO 类核心是 4 个抽象类：InputStream、OutputStream、Reader、Writer。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picTest</title>
      <link href="/2025/04/25/picTest/"/>
      <url>/2025/04/25/picTest/</url>
      
        <content type="html"><![CDATA[<p>图片测试啦</p><p>这是图片测试</p><p><img src="/2025/04/25/picTest/5.jpg" alt="5"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>first-blob</title>
      <link href="/2025/04/23/first-blob/"/>
      <url>/2025/04/23/first-blob/</url>
      
        <content type="html"><![CDATA[<h1 id="这是我的第一篇尝试型博客"><a href="#这是我的第一篇尝试型博客" class="headerlink" title="这是我的第一篇尝试型博客"></a>这是我的第一篇尝试型博客</h1><p>hi</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hi</title>
      <link href="/2025/04/23/hello-world/"/>
      <url>/2025/04/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
